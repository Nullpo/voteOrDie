package org.vote

object Box {
	var votes:List[Vote] = List[Vote]()
	var recountAlgorytm: List[Vote] => List[AnyRef] = null
	def addVote(vote : Vote){
	  this.votes = vote :: votes
	}
	
	def countFirstOcurrence(){
	  val head :: tail = votes
	  val v = countOcurrencesOf(head , tail,1)
	  println(v)
	}
	
	def countOcurrencesOf(E:Vote, list:List[Vote],Count:Integer) : Integer = {
	  // obtengo si se repitio este elemento esta vez
	  println(list)
	  return list match {
	    case cabeza :: t if cabeza == E  => countOcurrencesOf(E,t,Count +1)
	    case cabeza :: t => countOcurrencesOf(E,t,Count)
	    case List() => Count
	  }
	}
	
}