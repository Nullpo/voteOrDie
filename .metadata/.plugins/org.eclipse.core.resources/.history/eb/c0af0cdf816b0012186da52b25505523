package org.vote

object Box {
	var votes:List[Vote] = List[Vote]()
	var recountAlgorytm: List[Vote] => List[AnyRef] = null
	def addVote(vote : Vote){
	  this.votes = vote :: votes
	}

	def theWinnerIs() : (AnyRef,Integer) = getWithMoreVotes(countOcurrences())
	
	private def maxOf(A : (AnyRef, Integer), B : (AnyRef, Integer)) : (AnyRef, Integer)  = {
	 return if( A._2 > B._2) A else B
	}
	
	private def getWithMoreVotes(elems : List[(AnyRef,Integer)]) : (AnyRef, Integer) = if(elems != List()) elems.foldLeft(elems.head){(a,b) => maxOf(a ,b)} else (Nil,0)
	  
	def countOcurrences() : List[(AnyRef,Integer)]=
	 (collection.Set.empty[Vote] ++ votes).map(
	    x => countOcurrencesOf(x,votes,0)) (collection.breakOut)
	
	
	def countOcurrencesOf(E:Vote, list:List[_],Count:Integer) : (AnyRef,Integer) = 
	  list match {
	    case cabeza :: t if cabeza == E  => countOcurrencesOf(E,t,Count +1)
	    case cabeza :: t => countOcurrencesOf(E,t,Count)
	    case List() => (E.value,Count)
	  }
	
}