package org.vote

object Box extends RecountSystem{
	var votes:List[Vote] = List[Vote]()
	var recountSystem: RecountSystem = null
	
	def addVote(vote : Vote){
	  this.votes = vote :: votes
	}
	
	override def getWithMoreVotes(elems : List[(AnyRef,Integer)]) : (AnyRef, Integer) = if(elems != List()) (elems.foldLeft(elems.head){(a,b) => maxOf(a ,b)}) else (null,0)
	  
	def votationResults() : List[(AnyRef,Integer)]=
	 (collection.Set.empty[Vote] ++ votes).map(
	    x => countOcurrencesOf(x,votes,0)) (collection.breakOut)
	
	def countOcurrencesOf(E:Vote, list:List[AnyRef],Count:Integer) : (AnyRef,Integer) = 
	  list match {
	    case cabeza :: t if cabeza == E  => countOcurrencesOf(E,t,Count +1)
	    case cabeza :: t => countOcurrencesOf(E,t,Count)
	    case List() => (E.value,Count)
	  }
	
}