package org.vote

object Box {
	var votes:List[Vote] = List[Vote]()
	var recountAlgorytm: List[Vote] => List[AnyRef] = null
	def addVote(vote : Vote){
	  this.votes = vote :: votes
	}

	
	
	  
	  
	def countOcurrences() : List[(AnyRef,Integer)]={
	 return (collection.Set.empty[Vote] ++ votes).map(
	    x => countOcurrencesOf(x,votes,0)) (collection.breakout) (List[(AnyRef,Integer)])
	}
	
	
	def countOcurrencesOf(E:Vote, list:List[Vote],Count:Integer) : (AnyRef,Integer) = 
	  list match {
	    case cabeza :: t if cabeza == E  => countOcurrencesOf(E,t,Count +1)
	    case cabeza :: t => countOcurrencesOf(E,t,Count)
	    case List() => (E.value,Count)
	  }
	
}